%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/safestring {
    dup length string cvs
} bind def

/keys { % dict -> array of dict keys
    [ exch
      {
          pop
      } forall
    ]
} bind def

/strsplit % (ajbjc) (j) -> [ (a) (b) (c) ]
{
    1 dict begin
    /sep exch def
    [ exch
      {
          dup length 0 eq {
              pop
              exit
          } {
              sep search {
                  exch pop
                  dup length 0 eq {
                      pop
                  } {
                      exch
                  } ifelse
              } {
                  ()
              } ifelse
          } ifelse
      } loop
    ]
    end
} bind def

/listmax {
    { max } reduce
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/readlines {
    2 dict begin
    /fh exch (r) file def
    /buf fh bytesavailable string def
    [
        {
            fh buf readline {
                safestring
            } {
                pop
                exit
            } ifelse
        } loop
    ]
    fh closefile
    end
} bind def


% end included library code

/dimension 1000 def

/sign {
    dup 0 eq {
        pop 0
    } {
        0 gt {
            1
        } {
            -1
        } ifelse
    } ifelse
} bind def

/encode {
    dimension mul add
} bind def

/decode {
    dup dimension mod exch dimension idiv
} bind def

/state 0 dict def

(input) readlines {
    [ exch
      ( ) strsplit {
          (,) search {
              cvi exch pop exch cvi 2 array astore
          } {
              pop
          } ifelse
      } forall
    ]
    /l exch def
    0 1 l length 2 sub {
        /i exch def
        /a l i get def
        /b l i 1 add get def
        a 0 get b 0 get eq {
            a 1 get a 1 get b 1 get sub neg sign b 1 get {
                a 0 get exch encode state exch true put
            } for
        } {
            a 0 get a 0 get b 0 get sub neg sign b 0 get {
                a 1 get encode state exch true put
            } for
        } ifelse
    } for
} forall

state keys listmax decode /bottom exch 2 add def pop

/rest 0 def
{
    /pos 500 0 encode def
    state pos known {
        exit
    } if
    /first true def
    /resting false def
    {
        /pos pos dimension add def
        1 {
            pos decode exch pop bottom ge {
                /pos pos dimension sub def
                state pos true put
                /rest rest 1 add def
                /resting true def
                exit
            } if
            state pos known not {
                exit
            } if
            /pos pos 1 sub def
            state pos known not {
                exit
            } if
            /pos pos 2 add def
            state pos known not {
                exit
            } if
            /pos pos 1 sub dimension sub def
            state pos true put
            /rest rest 1 add def
            /resting true def
        } repeat
        resting {
            exit
        } if
    } loop
} loop

rest ==
