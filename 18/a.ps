%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/test {
    /test.count test.count 1 add def
    {
        /test.pass test.pass 1 add def
    } {
        ( ) print
        test.count (....) cvs print
        (-fail) print
    } ifelse
} bind def

/safestring {
    dup length string cvs
} bind def

/strsplit % (ajbjc) (j) -> [ (a) (b) (c) ]
{
    1 dict begin
    /sep exch def
    [ exch
      {
          dup length 0 eq {
              pop
              exit
          } {
              sep search {
                  exch pop
                  dup length 0 eq {
                      pop
                  } {
                      exch
                  } ifelse
              } {
                  ()
              } ifelse
          } ifelse
      } loop
    ]
    end
} bind def

/readlines {
    2 dict begin
    /fh exch (r) file def
    /buf fh bytesavailable string def
    [
        {
            fh buf readline {
                safestring
            } {
                pop
                exit
            } ifelse
        } loop
    ]
    fh closefile
    end
} bind def

/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
    end
} bind def


% end included library code

/cubes [
    (input) readlines {
        (,) strsplit { cvi } map
    } forall
] def

/hash 0 dict def

cubes {
    /cu exch def
    /a
    hash cu 0 get known {
        hash cu 0 get get
    } {
        1 dict
    } ifelse
    def
    /b
    a cu 1 get known {
        a cu 1 get get
    } {
        1 dict
    } ifelse
    def
    b cu 2 get true put
    a cu 1 get b put
    hash cu 0 get a put
} forall

/area cubes length 6 mul def

cubes {
    /cu exch def
    0 1 2 {
        /axis exch def
        -1 2 1 {
            /delta exch def
            /test [ cu aload pop ] def
            test axis test axis get delta add put
            hash test 0 get known {
                hash test 0 get get test 1 get known {
                    hash test 0 get get test 1 get get test 2 get known {
                        /area area 1 sub def
                    } if
                } if
            } if
        } for
    } for
} forall

area =
