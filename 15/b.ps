%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/quicksort.swap {
    2 dict begin
    /bi exch def
    /ai exch def
    arr ai get
    arr bi get
    arr exch ai exch put
    arr exch bi exch put
    end
} bind def

/readlines {
    2 dict begin
    /fh exch (r) file def
    /buf fh bytesavailable string def
    [
        {
            fh buf readline {
                safestring
            } {
                pop
                exit
            } ifelse
        } loop
    ]
    fh closefile
    end
} bind def

/quicksort { % [ a c b ] -> [ a b c ]
    1 dict begin
    /arr exch def
    arr length 0 gt {
        0 arr length 1 sub quicksort.main
    } if
    arr
    end
} bind def

/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
    end
} bind def

/quicksort.partition {
    3 dict begin
    /pivot arr hi lo add 2 idiv get def
    /i lo 1 sub def
    /j hi 1 add def
    {
        {
            /i i 1 add def
            arr i get pivot ge {
                exit
            } if
        } loop
        {
            /j j 1 sub def
            arr j get pivot le {
                exit
            } if
        } loop
        i j ge {
            j
            exit
        } if
        i j quicksort.swap
    } loop
    end
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def


/safestring {
    dup length string cvs
} bind def

/quicksort.main { % lo hi -> (null)
    3 dict begin
    /hi exch def
    /lo exch def
    /xit false def
    lo 0 lt {
        /xit true def
    } if
    hi 0 lt {
        /xit true def
    } if
    lo hi ge {
        /xit true def
    } if
    xit not {
        /p quicksort.partition def
        lo p quicksort.main
        p 1 add hi quicksort.main
    } if
    end
} bind def

/listmax {
    { max } reduce
} bind def

/listmin {
    { min } reduce
} bind def


% end included library code

/minus (-) 0 get def
/zero (0) 0 get def
/nine (9) 0 get def

/encode {
    dimension mul add
} bind def

/manhattandistance {
    3 -1 roll sub abs
    3 1 roll sub abs
    add
} bind def

/input [
    (input) readlines {
        /line exch def
        /i 0 def
        /start 0 def
        /end 0 def
        /number -1 def
        /innumber false def
        [
            line {
                dup minus eq exch dup zero ge exch nine le and or {
                    innumber not {
                        /start i def
                        /innumber true def
                    } if
                    /end i def
                } {
                    innumber {
                        line start end start sub 1 add getinterval cvi
                        /innumber false def
                    } if
                } ifelse
                /i i 1 add def
            } forall
            innumber {
                line start end start sub 1 add getinterval cvi
            } if
            4 copy manhattandistance
        ]
    } forall
] def

[
    1 2 3 {
        /i exch def
        input { i get } map aload pop
    } for
]
dup
listmax /yhi exch def
listmin /ylo exch def
/dimension yhi ylo sub 1 add def

/maxdim 4000000 def

/ylo ylo 0 max def
/yhi yhi maxdim min def

[
    0 2 2 {
        /i exch def
        input { i get } map aload pop
    } for
]
dup
listmax /xhi exch def
listmin /xlo exch def

/xlo xlo 0 max def
/xhi xhi maxdim min def

/beacons [
    input {
        /this exch def
        this 2 get 0 ge
        this 2 get maxdim le and
        this 3 get 0 ge and
        this 3 get maxdim le and {
            [ this 2 get this 3 get ]
        } if
    } forall
] def

ylo 1 yhi {
    /y exch def
    y 100000 mod 0 eq {
        y ==
    } if
    /ranges
    [
        input {
            /target exch def
            target 4 get target 1 get y sub abs sub
            dup 0 ge {
                [ exch dup neg target 0 get add 0 max exch target 0 get add maxdim min ]
            } {
                pop
            } ifelse
        } forall
    ] def
    /rweight [
        ranges {
            dup 1 get exch 0 get maxdim mul add
        } forall
    ] def
    /rk <<
            0 1 ranges length 1 sub {
                /i exch def
                rweight i get ranges i get
            } for
        >> def
    /i 0 def
    /bigranges [
        rweight quicksort { rk exch get } map {
            i 0 ne {
                /this exch def
                dup 1 get 1 add this 0 get ge {
                    dup dup 1 get this 1 get max 1 exch put
                } {
                    this
                } ifelse
            } if
            /i i 1 add def
        } forall
    ] def
    bigranges length 1 gt {
        bigranges 0 get 1 get 1 add 4000000 mul y add ==
        exit
    } if
} for
