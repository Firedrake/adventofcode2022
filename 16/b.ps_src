%!PS

/codeA (A) 0 get def

/valvenumber {
    dup 1 get codeA sub exch
    0 get codeA sub 26 mul add
} bind def

/evaluate {
    4 dict begin
    /l exch def
    /tick maxticks def
    /total 0 def
    /prev -1 def
    l {
        /e exch def
        e 0 gt {
            /tick tick 1 sub def
            /tick tick distances prev get e get sub def
            /total e flow exch get tick mul total add def
        } if
        /prev e abs def
    } forall
    total
    end
} bind def

/connections 0 dict def
/flow 0 dict def

(input) readlines {
    ( ) strsplit /line exch def
    /this line 1 get valvenumber def
    connections this [
        9 1 line length 1 sub {
            line exch get
            valvenumber
        } for
    ] put
    flow this line 4 get (=) strsplit 1 get (;) strsplit 0 get cvi put
} forall

/valves connections keys def

/dimension valves listmax 1 add def

/maxticks 26 def

/usefulvalves valves { dup 0 eq exch flow exch get 0 gt or } filter def

/useful usefulvalves toset def

/distances <<
               valves {
                   /a exch def
                   a
                   <<
                       valves {
                           /b exch def
                           a b ne {
                               b 0
                           } if
                       } forall
                   >>
               } forall
           >> def

0 1 valves length 2 sub {
    /ai exch def
    /a valves ai get def
    useful a known {
        ai 1 add 1 valves length 1 sub {
            /bi exch def
            /b valves bi get def
            useful b known {
                /l valves length def
                /dist << valves {
                            l
                         } forall >> def
                /prev << valves {
                         -1
                       } forall >> def
                /Q valves toset def
                dist a 0 put
                {
                    Q length 0 eq {
                        exit
                    } if
                    /m Q keys { dist exch get } map listmin def
                    /u Q keys { dist exch get m eq } filter 0 get def
                    Q u undef
                    connections u get {
                        /v exch def
                        /alt dist u get 1 add def
                        alt dist v get lt {
                            dist v alt put
                            prev v u put
                        } if
                    } forall
                } loop
                dist keys { a ne } filter {
                    /k exch def
                    distances a get k dist k get put
                    distances k get a dist k get put
                } forall
            } if
        } for
    } if
} for

/usefulinverse <<
                   usefulvalves enumerate.array {
                       aload pop exch
                   } forall
               >> def

/releasemap 0 dict def

/time [ 0 ] def
/stack [ [ 0 ] ] def
{
    stack length 0 eq {
        exit
    } if
    /stack stack apop.right /this exch def def
    /time time apop.right /tm exch def def
    /released this evaluate def
    /bitmap 0 def
    this {
        usefulinverse exch get 1 exch bitshift bitmap or /bitmap exch def
    } forall
    /bitmap bitmap 1 usefulinverse 0 get bitshift not and def
    releasemap bitmap known {
        released releasemap bitmap get gt {
            releasemap bitmap released put
        } if
    } {
        releasemap bitmap released put
    } ifelse
    tm maxticks lt {
        /latest this dup length 1 sub get def
        /visited this toset def
        [
            usefulvalves { visited exch known not } filter {
                /v exch def
                [ v distances latest get v get 1 add ]
            } forall
        ] {
            /new exch def
            /nt tm new 1 get add def
            nt maxticks le {
                /ns this new 0 get apush.right def
                /stack stack ns apush.right def
                /time time nt apush.right def
            } if
        } forall
    } if
} loop
releasemap 0 undef

/paths releasemap keys def

/highest 0 def
paths {
    /a exch def
    paths {
        /b exch def
        a b and 0 eq {
            /this releasemap a get releasemap b get add def
            /highest highest this max def
        } if
    } forall
} forall
highest ==
