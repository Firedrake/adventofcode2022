%!PS

/y 0 def

/xy2c {
   dup 1 get sizex mul exch 0 get add
} bind def

/c2xy {
    [ exch
      dup sizex mod exch sizex idiv
    ]
} bind def

/initx 0 def
/inity 0 def
/goalx 0 def
/goaly 0 def

/codea (a) 0 get def
/codez (z) 0 get def

[
    (input) readlines {
        dup (S) search {
            /inity y def
            length /initx exch def
            pop pop
            dup initx codea put
        } {
            pop
        } ifelse
        dup (E) search {
            /goaly y def
            length /goalx exch def
            pop pop
            dup goalx codez put
        } {
            pop
        } ifelse
        s2a { codea sub } map
        /y y 1 add def
    } forall
]

dup length /sizey exch def
dup 0 get length /sizex exch def

/init [ initx inity ] xy2c def 
/goal [ goalx goaly ] xy2c def

/size sizex sizey mul def

/height exch [ exch
    {
        aload pop
    } forall
] def

/dist [ size { size } repeat ] def
dist init 0 put
/prev [ size { -1 } repeat ] def
/Q [ 0 1 size 1 sub { } for ] toset def

{
    Q length 0 eq {
        exit
    } if
    /mindist Q keys { dist exch get } map listmin def
    /u Q keys { dist exch get mindist eq } filter 0 get def
    u goal eq {
        exit
    } if
    Q u undef
    [ sizex neg -1 1 sizex ] {
        u add
        /v exch def
        1 {
            v 0 lt {
                exit
            } if
            v size ge {
                exit
            } if
            v c2xy 0 get
            dup 0 lt {
                pop
                exit
            } if
            sizex ge {
                exit
            }
            height v get height u get sub 1 gt {
                exit
            } if
            Q v known not {
                exit
            } if
            /alt dist u get 1 add def
            alt dist v get lt {
                dist v alt put
                prev v u put
            } if
        } repeat
    } forall
} loop

[
    /u goal def
    prev u get -1 ne u init eq or {
        {
            u
            /u prev u get def
            u -1 eq {
                exit
            } if
        } loop
    } if
] length 1 sub ==
