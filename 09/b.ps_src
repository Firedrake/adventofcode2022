%!PS

/debug false def

/sign {
    dup 0 eq {
        pop 0
    } {
        0 gt {
            1
        } {
            -1
        } ifelse
    } ifelse
} bind def

/dirs <<
          (U) [0 1]
          (D) [0 -1]
          (L) [-1 0]
          (R) [1 0]
      >> def

/visited 0 dict def

/dimension 100000 def

/rope [ 10 { [ 0 0 ] } repeat ] def

(input) readlines {
    debug { dup == } if
    ( ) strsplit aload pop
    /dist exch cvi def
    dirs exch get /delta exch def
    dist {
        0 1 1 {
            /axis exch def
            /xp rope 0 get def
            xp axis
            xp axis get delta axis get add
            put
        } for
        1 1 9 {
            /knot exch def
            /xy rope knot get def
            /xd rope knot 1 sub get 0 get xy 0 get sub def
            /yd rope knot 1 sub get 1 get xy 1 get sub def
            debug { [ xd yd ] == } if
            1 {
                xd 0 eq yd abs 2 ge and {
                    xy 1 xy 1 get yd sign add put
                    exit
                } if
                yd 0 eq xd abs 2 ge and {
                    xy 0 xy 0 get xd sign add put
                    exit
                } if
                xd abs 2 ge yd abs 2 ge or {
                    xy 0 xy 0 get xd sign add put
                    xy 1 xy 1 get yd sign add put
                } if
            } repeat
            rope knot xy put
        } for
        debug { rope == } if
        visited rope 9 get 0 get dimension mul rope 9 get 1 get add true put
    } repeat
} forall

visited length ==
