%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/listmax {
    { max } reduce
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/map { % array proc -> array
    2 dict begin
    /p exch def
    [ exch
      {
          p
      } forall
    ]
    end
} bind def

/enumerate.array {
    1 dict begin
    /a exch def
    [
      0 1 a length 1 sub {
          [ exch dup a exch get ]
      } for
    ]
    end
} bind def

/safestring {
    dup length string cvs
} bind def

/readlines {
    2 dict begin
    /fh exch (r) file def
    /buf fh bytesavailable string def
    [
        {
            fh buf readline {
                safestring
            } {
                pop
                exit
            } ifelse
        } loop
    ]
    fh closefile
    end
} bind def

/s2a {
    [ exch { } forall ]
} bind def

/a2s {
    2 dict begin
    /i exch def
    i length dup string /o exch def
    1 sub 0 exch 1 exch {
        dup i 3 -1 roll get o 3 1 roll put
    } for
    o
    end
} bind def


% end included library code

/codespace ( ) 0 get def
/codedot (.) 0 get def
/codehash (#) 0 get def
/codeL (L) 0 get def
/codeR (R) 0 get def

/posmod {
    dup
    3 1 roll
    mod
    dup 0 lt {
        add
    } {
        exch pop
    } ifelse
} bind def

/lines [
    /state 0 def
    (input) readlines {
        /line exch def
        state 0 eq {
            line length 0 eq {
                /state 1 def
            } {
                line
            } ifelse
        } {
            /orders [
            /l 0 def
            [
                line s2a enumerate.array {
                    aload pop dup codeL eq exch codeR eq or not {
                        pop
                    } if
                } forall
            ] {
                /r exch def
                line l r l sub getinterval cvi
                line r 1 getinterval safestring
                /l r 1 add def
            } forall
            line l line length l sub getinterval cvi
        ] def
        } ifelse
    } forall
] def

/mxx lines { length } map listmax def
0 1 lines length 1 sub {
    /y exch def
    lines y get length mxx lt {
        lines y
        [ lines y get s2a aload length mxx exch sub { codespace } repeat ] a2s
        put
    } if
} for

/directions [
    [ 1 0 ]
    [ 0 1 ]
    [ -1 0 ]
    [ 0 -1 ]
] def

/y 0 def
lines 0 get (.) search pop length /x exch def pop pop
/dir 0 def

orders {
    /o exch def
    o type /integertype eq {
        o {
            /dx directions dir get 0 get def
            /dy directions dir get 1 get def
            /nx x def
            /ny y def
            {
                /nx nx dx add def
                /ny ny dy add def
                1 {
                    ny lines length ge {
                        /ny 0 def
                        exit
                    } if
                    ny 0 lt {
                        /ny lines length 1 sub def
                        exit
                    } if
                    nx lines ny get length ge {
                        /nx 0 def
                        exit
                    } if
                    nx 0 lt {
                        /nx lines ny get length 1 sub def
                        exit
                    } if
                } repeat
                lines ny get nx get codedot eq {
                    exit
                } if
                lines ny get nx get codehash eq {
                    /nx x def
                    /ny y def
                    exit
                } if
            } loop
            /x nx def
            /y ny def
        } repeat
        lines y get x codeR put
        lines {
            ==
        } forall
        ( ) =
        lines y get x codedot put
    } {
        o 0 get codeL eq {
            /dir dir 1 sub def
        } {
            /dir dir 1 add def
        } ifelse
        /dir dir 4 posmod def
    } ifelse
} forall

y 1 add 1000 mul
x 1 add 4 mul add
dir add ==
