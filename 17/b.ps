%!PS

% begin included library code
% see https://github.com/Firedrake/postscript-libraries/
/apop.right { % [a b c] -> [a b] c
    [ exch aload length 1 add 1 roll ] exch
} bind def

/listmax {
    { max } reduce
} bind def

/reduce { % array proc -> value
    2 dict begin
    /p exch def
    /a exch def
    a 0 get
    1 1 a length 1 sub {
        a exch get
        p
    } for
    end
} bind def

/readlines {
    2 dict begin
    /fh exch (r) file def
    /buf fh bytesavailable string def
    [
        {
            fh buf readline {
                safestring
            } {
                pop
                exit
            } ifelse
        } loop
    ]
    fh closefile
    end
} bind def

/safestring {
    dup length string cvs
} bind def

/apush.right { % [a b] c -> [a b c]
    exch
    [ exch aload length 2 add -1 roll ]
} bind def

/s2a {
    [ exch { } forall ]
} bind def

/reverse {
    1 dict begin
    dup length /l exch def
    [ exch
      aload pop
      2 1 l {
          -1 roll
      } for
    ]
    end
} bind def


% end included library code

/debug false def

/codeleft (<) 0 get def
/coderight (>) 0 get def
/codewall (|) 0 get def
/codedot (.) 0 get def
/codehash (#) 0 get def

(input) readlines {
    [ exch
      s2a {
          codeleft eq {
              -1
          } {
              1
          } ifelse
      } forall
    ] /jets exch def
} forall

/jl jets length def
/ji 0 def

/rocks [
    [ 15 ]
    [ 2 7 2 ]
    [ 7 4 4 ]
    [ 1 1 1 1 ]
    [ 3 3 ]
] def

/tobinary {
    [ exch
      {
          dup 1 and exch
          -1 bitshift
          dup 0 eq {
              pop
              exit
          } if
      } loop
    ]
} bind def

/rockwidth [
    rocks {
        [ exch
          {
              tobinary length
          } forall
        ] listmax
    } forall
]
def

/rl rocks length def
/ri 0 def

/chute [ ] def

/collision {
    0 dict begin
    /ty exch def
    /tx exch def
    /tri exch def
    false
    1 {
        tx 0 lt {
            pop true
            exit
        } if
        tx rockwidth tri get add 7 gt {
            pop true
            exit
        } if
        ty 0 lt {
            pop true
            exit
        } if
        0 1 rocks tri get length 1 sub {
            /ry exch def
            rocks tri get ry get tx bitshift
            chute ty ry add get and 0 gt {
                pop true
                exit
            } if
        } for
    } repeat
    end
} bind def

/chutedump {
    chute reverse {
        /val exch def
        /line 9 string def
        line 0 codewall put
        line 8 codewall put
        0 1 6 {
            /i exch def
            val 1 i bitshift and 0 gt {
                line i 1 add codehash put
            } {
                line i 1 add codedot put
            } ifelse
        } for
        line =
    } forall
} bind def

/jstep 0 dict def
/cycle 1 def
/lens [ 0 ] def

/target 1000000000000 def

{
    /y chute length 3 add def
    /chute [ chute aload pop 7 { 0 } repeat ] def
    /x 2 def
    {
        /jet jets ji get def
        /ji ji 1 add jl mod def
        /nx x jet add def
        ri nx y collision not {
            /x nx def
        } if
        debug {
            [ x y ] ==
        } if
        /ny y 1 sub def
        ri x ny collision {
            exit
        } {
            /y ny def
        } ifelse
        debug {
            [ x y ] ==
        } if
    } loop
    0 1 rocks ri get length 1 sub {
        /ry exch def
        rocks ri get ry get x bitshift
        chute y ry add get or
        chute exch y ry add exch put
    } for
    {
        chute dup length 1 sub get 0 eq {
            /chute chute apop.right pop def
        } {
            exit
        } ifelse
    } loop
    debug {
        chutedump
    } if
    /lens lens chute length apush.right def
    /ri ri 1 add rl mod def
    ri 0 eq {
        jstep ji known {
            /prevcycle jstep ji get def
            /clen cycle prevcycle sub def
            target cycle sub dup clen mod /extra exch def
            clen idiv 1 add /reps exch def
            lens prevcycle get
            lens prevcycle extra add get lens prevcycle get sub add
            lens cycle get lens prevcycle get sub reps mul add
            ==
            exit
        } {
            jstep ji cycle put
        } ifelse
    } if
    /cycle cycle 1 add def
} loop
